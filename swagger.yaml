swagger: "2.0"
info:
  version: 1.0.0
  title: crimzone
  description: The crimzone service, used for looking up crimes.
  termsOfService: N/A
  contact:
    name: Gustav Karlsson
    email: gustav.karlsson@gmail.com
    url: http://gustavkarlsson.se
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /crimes/{id}:
    get:
      tags:
        - crimes
      description: Finds a crime based on a single ID
      operationId: findById
      parameters:
        - name: id
          in: path
          description: ID of crime to fetch
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: A single crime
          schema:
            $ref: '#/definitions/Crime'
        404:
          description: A Not Found error (404) indicating that a crime with that ID could not be found
  /crimes:
    get:
      tags:
        - crimes
      description: Gets all crimes as a base64 encoded byte array of id's, times and coordinates.
      operationId: getAll
      responses:
        200:
          description: |
            A single base64 encoded byte array of id's, times and coordinates. Each crime takes up 16 bytes.
            Bytes 1-4: id of the crime as a signed int.
            Bytes 5-8: time, as the number of seconds (note, not milliseconds) since the epoch as a signed int.
            Bytes 9-12: latitude as a float.
            Bytes 13-16: longitude as a float.
          schema:
            $ref: '#/definitions/Crimes'
definitions:
  Crime:
    properties:
      _id:
        type: integer
        format: int32
      time:
        type: integer
        format: int32
      location:
        $ref: '#/definitions/GeoJsonPoint'
      title:
        type: string
      description:
        type: string
    required:
      - _id
      - time
      - location
      - title
      - description
  Crimes:
    properties:
      data:
        type: string
        format: byte
    required:
      - data
  GeoJsonPoint:
    properties:
      type:
        type: string
        pattern: '^Point$'
      coordinates:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: number
          format: float
        description: '[longitude, latitude]'
    required:
      - type
      - coordinates